// winnls.h -- NLS procedure declarations, constant definitions and macros 

#ifndef _WINNLS_
#define _WINNLS_

// Typedefs

/*

// Locale type constant.
typedef DWORD LCTYPE;

// Calendar type constant.
typedef DWORD CALTYPE;

// Calendar ID.
typedef DWORD CALID;


// CP Info.

typedef struct CPINFO {
    UINT    MaxCharSize;                    // max length (bytes) of a char
    BYTE    DefaultChar[MAX_DEFAULTCHAR];   // default character
    BYTE    LeadByte[MAX_LEADBYTES];        // lead byte ranges
} CPINFO, *LPCPINFO;


// Number format.

#ifndef UNICODE_ONLY
typedef struct NUMBERFMTA {
    UINT    NumDigits;                 // number of decimal digits
    UINT    LeadingZero;               // if leading zero in decimal fields
    UINT    Grouping;                  // group size left of decimal
    LPTSTR   lpDecimalSep;              // ptr to decimal separator string
    LPTSTR   lpThousandSep;             // ptr to thousand separator string
    UINT    NegativeOrder;             // negative number ordering
} NUMBERFMTA, *LPNUMBERFMTA;
#endif //!UNICODE_ONLY
#ifndef ANSI_ONLY
typedef struct NUMBERFMTW {
    UINT    NumDigits;                 // number of decimal digits
    UINT    LeadingZero;               // if leading zero in decimal fields
    UINT    Grouping;                  // group size left of decimal
    LPWSTR  lpDecimalSep;              // ptr to decimal separator string
    LPWSTR  lpThousandSep;             // ptr to thousand separator string
    UINT    NegativeOrder;             // negative number ordering
} NUMBERFMTW, *LPNUMBERFMTW;
#endif //!ANSI_ONLY
#ifdef UNICODE
typedef NUMBERFMTW NUMBERFMT;
typedef LPNUMBERFMTW LPNUMBERFMT;
#else
typedef NUMBERFMTA NUMBERFMT;
typedef LPNUMBERFMTA LPNUMBERFMT;
#endif // UNICODE


// Currency format.

typedef struct CURRENCYFMT {
    UINT    NumDigits;                 // number of decimal digits
    UINT    LeadingZero;               // if leading zero in decimal fields
    UINT    Grouping;                  // group size left of decimal
    LPTSTR   lpDecimalSep;              // ptr to decimal separator string
    LPTSTR   lpThousandSep;             // ptr to thousand separator string
    UINT    NegativeOrder;             // negative currency ordering
    UINT    PositiveOrder;             // positive currency ordering
    LPTSTR   lpCurrencySymbol;          // ptr to currency symbol string
} CURRENCYFMT, *LPCURRENCYFMT;



// Enumeration function constants.

#ifdef STRICT

typedef BOOL (CALLBACK* LOCALE_ENUMPROCA)(LPSTR);
typedef BOOL (CALLBACK* CODEPAGE_ENUMPROCA)(LPSTR);
typedef BOOL (CALLBACK* DATEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (CALLBACK* TIMEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (CALLBACK* CALINFO_ENUMPROCA)(LPSTR);

typedef BOOL (CALLBACK* LOCALE_ENUMPROCW)(LPWSTR);
typedef BOOL (CALLBACK* CODEPAGE_ENUMPROCW)(LPWSTR);
typedef BOOL (CALLBACK* DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (CALLBACK* TIMEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (CALLBACK* CALINFO_ENUMPROCW)(LPWSTR);

#else // !STRICT

#ifndef UNICODE_ONLY
typedef FARPROC LOCALE_ENUMPROCA;
#endif //!UNICODE_ONLY
#ifndef UNICODE_ONLY
typedef FARPROC CODEPAGE_ENUMPROCA;
#endif //!UNICODE_ONLY
#ifndef UNICODE_ONLY
typedef FARPROC DATEFMT_ENUMPROCA;
#endif //!UNICODE_ONLY
#ifndef UNICODE_ONLY
typedef FARPROC TIMEFMT_ENUMPROCA;
#endif //!UNICODE_ONLY
#ifndef UNICODE_ONLY
typedef FARPROC CALINFO_ENUMPROCA;
#endif //!UNICODE_ONLY

#ifndef ANSI_ONLY
typedef FARPROC LOCALE_ENUMPROCW;
#endif //!ANSI_ONLY
#ifndef ANSI_ONLY
typedef FARPROC CODEPAGE_ENUMPROCW;
#endif //!ANSI_ONLY
#ifndef ANSI_ONLY
typedef FARPROC DATEFMT_ENUMPROCW;
#endif //!ANSI_ONLY
#ifndef ANSI_ONLY
typedef FARPROC TIMEFMT_ENUMPROCW;
#endif //!ANSI_ONLY
#ifndef ANSI_ONLY
typedef FARPROC CALINFO_ENUMPROCW;
#endif //!ANSI_ONLY

#endif // !STRICT

#ifdef UNICODE

#define LOCALE_ENUMPROC    LOCALE_ENUMPROCW
#define CODEPAGE_ENUMPROC  CODEPAGE_ENUMPROCW
#define DATEFMT_ENUMPROC   DATEFMT_ENUMPROCW
#define TIMEFMT_ENUMPROC   TIMEFMT_ENUMPROCW
#define CALINFO_ENUMPROC   CALINFO_ENUMPROCW

#else

#define LOCALE_ENUMPROC    LOCALE_ENUMPROCA
#define CODEPAGE_ENUMPROC  CODEPAGE_ENUMPROCA
#define DATEFMT_ENUMPROC   DATEFMT_ENUMPROCA
#define TIMEFMT_ENUMPROC   TIMEFMT_ENUMPROCA
#define CALINFO_ENUMPROC   CALINFO_ENUMPROCA

#endif // !UNICODE
*/

[
#ifdef UNICODE
uuid(64675070-3A82-101B-8181-00AA003743D3),
#else
uuid(64674070-3A82-101B-8181-00AA003743D3),
#endif
helpstring("National Language Support Functions and Types"),
dllname("KERNEL32.DLL")
]
module WinNLS {

    // Constants
    // Define all constants for the NLS component here.

    // #define LANG_NEUTRAL                     0x00
    // #define SUBLANG_NEUTRAL                  0x00    // language neutral
    // #define SUBLANG_DEFAULT                  0x01    // user default
    // #define SUBLANG_SYS_DEFAULT              0x02    // system default
    // #define SORT_DEFAULT                     0x00    // system default

    // #define MAKELANGID(p, s)       ((((WORD  )(s)) << 10) | (WORD  )(p))
    // #define MAKELCID(lgid, srtid)  ((DWORD)((((DWORD)((WORD  )(srtid))) << 16) |  ((DWORD)((WORD  )(lgid)))))

    // (MAKELANGID(LANG_NEUTRAL, SUBLANG_SYS_DEFAULT))               v
    const DWORD LANG_SYSTEM_DEFAULT     = 0x00000800;  // 1098765432109876543210
    // (MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT))
    const DWORD LANG_USER_DEFAULT       = 0x00000400;

    // (MAKELCID(LANG_SYSTEM_DEFAULT, SORT_DEFAULT))
    const DWORD LOCALE_SYSTEM_DEFAULT   = 0x00000800;
    // (MAKELCID(LANG_USER_DEFAULT, SORT_DEFAULT))
    const DWORD LOCALE_USER_DEFAULT     = 0x00000400;

    // (MAKELCID(MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL), SORT_DEFAULT))
    const DWORD LOCALE_NEUTRAL          = 0x00000000;

    // String Length Maximums.
    const DWORD MAX_LEADBYTES        = 12;             // 5 ranges, 2 bytes ea., 0 term.
    const DWORD MAX_DEFAULTCHAR      = 2;              // single or double byte


    // MBCS and Unicode Translation Flags.
    const DWORD MB_PRECOMPOSED       = 0x00000001;     // use precomposed chars
    const DWORD MB_COMPOSITE         = 0x00000002;     // use composite chars
    const DWORD MB_USEGLYPHCHARS     = 0x00000004;     // use glyph chars, not ctrl chars
    const DWORD MB_ERR_INVALID_CHARS = 0x00000008;     // error for invalid chars

    const DWORD WC_DEFAULTCHECK      = 0x00000100;     // check for default char
    const DWORD WC_COMPOSITECHECK    = 0x00000200;     // convert composite to precomposed
    const DWORD WC_DISCARDNS         = 0x00000010;     // discard non-spacing chars
    const DWORD WC_SEPCHARS          = 0x00000020;     // generate separate chars
    const DWORD WC_DEFAULTCHAR       = 0x00000040;     // replace w/ default char




    // Character Type Flags.
    const DWORD CT_CTYPE1            = 0x00000001;     // ctype 1 information
    const DWORD CT_CTYPE2            = 0x00000002;     // ctype 2 information
    const DWORD CT_CTYPE3            = 0x00000004;     // ctype 3 information

    // CType 1 Flag Bits.
    const DWORD C1_UPPER             = 0x0001;         // upper case
    const DWORD C1_LOWER             = 0x0002;         // lower case
    const DWORD C1_DIGIT             = 0x0004;         // decimal digits
    const DWORD C1_SPACE             = 0x0008;         // spacing characters
    const DWORD C1_PUNCT             = 0x0010;         // punctuation characters
    const DWORD C1_CNTRL             = 0x0020;         // control characters
    const DWORD C1_BLANK             = 0x0040;         // blank characters
    const DWORD C1_XDIGIT            = 0x0080;         // other digits
    const DWORD C1_ALPHA             = 0x0100;         // any linguistic character

    // CType 2 Flag Bits.
    const DWORD C2_LEFTTORIGHT       = 0x0001;         // left to right
    const DWORD C2_RIGHTTOLEFT       = 0x0002;         // right to left

    const DWORD C2_EUROPENUMBER      = 0x0003;         // European number, digit
    const DWORD C2_EUROPESEPARATOR   = 0x0004;         // European numeric separator
    const DWORD C2_EUROPETERMINATOR  = 0x0005;         // European numeric terminator
    const DWORD C2_ARABICNUMBER      = 0x0006;         // Arabic number
    const DWORD C2_COMMONSEPARATOR   = 0x0007;         // common numeric separator

    const DWORD C2_BLOCKSEPARATOR    = 0x0008;         // block separator
    const DWORD C2_SEGMENTSEPARATOR  = 0x0009;         // segment separator
    const DWORD C2_WHITESPACE        = 0x000A;         // white space
    const DWORD C2_OTHERNEUTRAL      = 0x000B;         // other neutrals

    const DWORD C2_NOTAPPLICABLE     = 0x0000;         // no implicit directionality

    // CType 3 Flag Bits.
    const DWORD C3_NONSPACING        = 0x0001;         // nonspacing character
    const DWORD C3_DIACRITIC         = 0x0002;         // diacritic mark
    const DWORD C3_VOWELMARK         = 0x0004;         // vowel mark
    const DWORD C3_SYMBOL            = 0x0008;         // symbols

    const DWORD C3_KATAKANA          = 0x0010;         // katakana character
    const DWORD C3_HIRAGANA          = 0x0020;         // hiragana character
    const DWORD C3_HALFWIDTH         = 0x0040;         // half width character
    const DWORD C3_FULLWIDTH         = 0x0080;         // full width character
    const DWORD C3_IDEOGRAPH         = 0x0100;         // ideographic character
    const DWORD C3_KASHIDA           = 0x0200;         // Arabic kashida character
    const DWORD C3_LEXICAL           = 0x0400;         // lexical character

    const DWORD C3_ALPHA             = 0x8000;         // any linguistic char (C1_ALPHA)

    const DWORD C3_NOTAPPLICABLE     = 0x0000;         // ctype 3 is not applicable

    // String Flags.
    const DWORD NORM_IGNORECASE         = 0x00000001;  // ignore case
    const DWORD NORM_IGNORENONSPACE     = 0x00000002;  // ignore nonspacing chars
    const DWORD NORM_IGNORESYMBOLS      = 0x00000004;  // ignore symbols

    const DWORD NORM_IGNOREKANATYPE     = 0x00010000;  // ignore kanatype
    const DWORD NORM_IGNOREWIDTH        = 0x00020000;  // ignore width


    /*
    // Locale Independent Mapping Flags.
    const DWORD MAP_FOLDCZONE           = 0x00000010;  // fold compatibility zone chars
    const DWORD MAP_PRECOMPOSED         = 0x00000020;  // convert to precomposed chars
    const DWORD MAP_COMPOSITE           = 0x00000040;  // convert to composite chars
    const DWORD MAP_FOLDDIGITS          = 0x00000080;  // all digits to ASCII 0-9


    // Locale Dependent Mapping Flags.
    const DWORD LCMAP_LOWERCASE         = 0x00000100;  // lower case letters
    const DWORD LCMAP_UPPERCASE         = 0x00000200;  // upper case letters
    const DWORD LCMAP_SORTKEY           = 0x00000400;  // WC sort key (normalize)
    const DWORD LCMAP_BYTEREV           = 0x00000800;  // byte reversal

    const DWORD LCMAP_HIRAGANA          = 0x00100000;  // map katakana to hiragana
    const DWORD LCMAP_KATAKANA          = 0x00200000;  // map hiragana to katakana
    const DWORD LCMAP_HALFWIDTH         = 0x00400000;  // map double byte to single byte
    const DWORD LCMAP_FULLWIDTH         = 0x00800000;  // map single byte to double byte



    // Locale Enumeration Flags.
    const DWORD LCID_INSTALLED          = 0x00000001;  // installed locale ids
    const DWORD LCID_SUPPORTED          = 0x00000002;  // supported locale ids

    // Code Page Enumeration Flags.
    const DWORD CP_INSTALLED            = 0x00000001;  // installed code page ids
    const DWORD CP_SUPPORTED            = 0x00000002;  // supported code page ids
    */

    // Sorting Flags.
    //    WORD Sort:    culturally correct sort
    //                  hyphen and apostrophe are special cased
    //                  example: "coop" and "co-op" will sort together in a list
    //
    //                        co_op     <-------  underscore (symbol)
    //                        coat
    //                        comb
    //                        coop
    //                        co-op     <-------  hyphen (punctuation)
    //                        cork
    //                        went
    //                        were
    //                        we're     <-------  apostrophe (punctuation)
    //
    //
    //    STRING Sort:  hyphen and apostrophe will sort with all other symbols
    //
    //                        co-op     <-------  hyphen (punctuation)
    //                        co_op     <-------  underscore (symbol)
    //                        coat
    //                        comb
    //                        coop
    //                        cork
    //                        we're     <-------  apostrophe (punctuation)
    //                        went
    //                        were

    const DWORD SORT_STRINGSORT         = 0x00001000;  // use string sort method


    // Code Page Default Values.
    const DWORD CP_ACP               = 0;              // default to ANSI code page
    const DWORD CP_OEMCP             = 1;              // default to OEM  code page
    const DWORD CP_MACCP             = 2;              // default to MAC  code page


    // Country Codes.
    const DWORD CTRY_DEFAULT                     = 0;

    const DWORD CTRY_AUSTRALIA                   = 61;      // Australia
    const DWORD CTRY_AUSTRIA                     = 43;      // Austria
    const DWORD CTRY_BELGIUM                     = 32;      // Belgium
    const DWORD CTRY_BRAZIL                      = 55;      // Brazil
    const DWORD CTRY_BULGARIA                    = 359;     // Bulgaria
    const DWORD CTRY_CANADA                      = 2;       // Canada
    const DWORD CTRY_CROATIA                     = 385;     // Croatia
    const DWORD CTRY_CZECH                       = 42;      // Czech Republic
    const DWORD CTRY_DENMARK                     = 45;      // Denmark
    const DWORD CTRY_FINLAND                     = 358;     // Finland
    const DWORD CTRY_FRANCE                      = 33;      // France
    const DWORD CTRY_GERMANY                     = 49;      // Germany
    const DWORD CTRY_GREECE                      = 30;      // Greece
    const DWORD CTRY_HONG_KONG                   = 852;     // Hong Kong
    const DWORD CTRY_HUNGARY                     = 36;      // Hungary
    const DWORD CTRY_ICELAND                     = 354;     // Iceland
    const DWORD CTRY_IRELAND                     = 353;     // Ireland
    const DWORD CTRY_ITALY                       = 39;      // Italy
    const DWORD CTRY_JAPAN                       = 81;      // Japan
    const DWORD CTRY_MEXICO                      = 52;      // Mexico
    const DWORD CTRY_NETHERLANDS                 = 31;      // Netherlands
    const DWORD CTRY_NEW_ZEALAND                 = 64;      // New Zealand
    const DWORD CTRY_NORWAY                      = 47;      // Norway
    const DWORD CTRY_POLAND                      = 48;      // Poland
    const DWORD CTRY_PORTUGAL                    = 351;     // Portugal
    const DWORD CTRY_PRCHINA                     = 86;      // Peoples' Republic of China
    const DWORD CTRY_ROMANIA                     = 40;      // Romania
    const DWORD CTRY_RUSSIA                      = 7;       // Russia
    const DWORD CTRY_SINGAPORE                   = 65;      // Singapore
    const DWORD CTRY_SLOVAK                      = 42;      // Slovak Republic
    const DWORD CTRY_SLOVENIA                    = 386;     // Slovenia
    const DWORD CTRY_SOUTH_KOREA                 = 82;      // South Korea
    const DWORD CTRY_SPAIN                       = 34;      // Spain
    const DWORD CTRY_SWEDEN                      = 46;      // Sweden
    const DWORD CTRY_SWITZERLAND                 = 41;      // Switzerland
    const DWORD CTRY_TAIWAN                      = 886;     // Taiwan
    const DWORD CTRY_TURKEY                      = 90;      // Turkey
    const DWORD CTRY_UNITED_KINGDOM              = 44;      // United Kingdom
    const DWORD CTRY_UNITED_STATES               = 1;       // United States


    //
    //  Locale Types.
    //
    //  These types are used for the GetLocaleInfoW NLS API routine.
    //
    //  LOCALE_NOUSEROVERRIDE is also used in GetTimeFormatW and GetDateFormatW.
    //
    //  LOCALE_USE_CP_ACP is used in many of the A (Ansi) apis that need to do
    //  string translation.
    //
    const DWORD LOCALE_NOUSEROVERRIDE       = 0x80000000;   // do not use user overrides
    const DWORD LOCALE_USE_CP_ACP           = 0x40000000;   // use the system ACP

    const DWORD LOCALE_ILANGUAGE            = 0x00000001;   // language id
    const DWORD LOCALE_SLANGUAGE            = 0x00000002;   // localized name of language
    const DWORD LOCALE_SENGLANGUAGE         = 0x00001001;   // English name of language
    const DWORD LOCALE_SABBREVLANGNAME      = 0x00000003;   // abbreviated language name
    const DWORD LOCALE_SNATIVELANGNAME      = 0x00000004;   // native name of language
    const DWORD LOCALE_ICOUNTRY             = 0x00000005;   // country code
    const DWORD LOCALE_SCOUNTRY             = 0x00000006;   // localized name of country
    const DWORD LOCALE_SENGCOUNTRY          = 0x00001002;   // English name of country
    const DWORD LOCALE_SABBREVCTRYNAME      = 0x00000007;   // abbreviated country name
    const DWORD LOCALE_SNATIVECTRYNAME      = 0x00000008;   // native name of country
    const DWORD LOCALE_IDEFAULTLANGUAGE     = 0x00000009;   // default language id
    const DWORD LOCALE_IDEFAULTCOUNTRY      = 0x0000000A;   // default country code
    const DWORD LOCALE_IDEFAULTCODEPAGE     = 0x0000000B;   // default oem code page
    const DWORD LOCALE_IDEFAULTANSICODEPAGE = 0x00001004;   // default ansi code page

    const DWORD LOCALE_SLIST                = 0x0000000C;   // list item separator
    const DWORD LOCALE_IMEASURE             = 0x0000000D;   // 0 = metric, 1 = US

    const DWORD LOCALE_SDECIMAL             = 0x0000000E;   // decimal separator
    const DWORD LOCALE_STHOUSAND            = 0x0000000F;   // thousand separator
    const DWORD LOCALE_SGROUPING            = 0x00000010;   // digit grouping
    const DWORD LOCALE_IDIGITS              = 0x00000011;   // number of fractional digits
    const DWORD LOCALE_ILZERO               = 0x00000012;   // leading zeros for decimal
    const DWORD LOCALE_INEGNUMBER           = 0x00001010;   // negative number mode
    const DWORD LOCALE_SNATIVEDIGITS        = 0x00000013;   // native ascii 0-9

    const DWORD LOCALE_SCURRENCY            = 0x00000014;   // local monetary symbol
    const DWORD LOCALE_SINTLSYMBOL          = 0x00000015;   // intl monetary symbol
    const DWORD LOCALE_SMONDECIMALSEP       = 0x00000016;   // monetary decimal separator
    const DWORD LOCALE_SMONTHOUSANDSEP      = 0x00000017;   // monetary thousand separator
    const DWORD LOCALE_SMONGROUPING         = 0x00000018;   // monetary grouping
    const DWORD LOCALE_ICURRDIGITS          = 0x00000019;   // # local monetary digits
    const DWORD LOCALE_IINTLCURRDIGITS      = 0x0000001A;   // # intl monetary digits
    const DWORD LOCALE_ICURRENCY            = 0x0000001B;   // positive currency mode
    const DWORD LOCALE_INEGCURR             = 0x0000001C;   // negative currency mode

    const DWORD LOCALE_SDATE                = 0x0000001D;   // date separator
    const DWORD LOCALE_STIME                = 0x0000001E;   // time separator
    const DWORD LOCALE_SSHORTDATE           = 0x0000001F;   // short date format string
    const DWORD LOCALE_SLONGDATE            = 0x00000020;   // long date format string
    const DWORD LOCALE_STIMEFORMAT          = 0x00001003;   // time format string
    const DWORD LOCALE_IDATE                = 0x00000021;   // short date format ordering
    const DWORD LOCALE_ILDATE               = 0x00000022;   // long date format ordering
    const DWORD LOCALE_ITIME                = 0x00000023;   // time format specifier
    const DWORD LOCALE_ITIMEMARKPOSN        = 0x00001005;   // time marker position
    const DWORD LOCALE_ICENTURY             = 0x00000024;   // century format specifier (short date)
    const DWORD LOCALE_ITLZERO              = 0x00000025;   // leading zeros in time field
    const DWORD LOCALE_IDAYLZERO            = 0x00000026;   // leading zeros in day field (short date)
    const DWORD LOCALE_IMONLZERO            = 0x00000027;   // leading zeros in month field (short date)
    const DWORD LOCALE_S1159                = 0x00000028;   // AM designator
    const DWORD LOCALE_S2359                = 0x00000029;   // PM designator

    const DWORD LOCALE_ICALENDARTYPE        = 0x00001009;   // type of calendar specifier
    const DWORD LOCALE_IOPTIONALCALENDAR    = 0x0000100B;   // additional calendar types specifier
    const DWORD LOCALE_IFIRSTDAYOFWEEK      = 0x0000100C;   // first day of week specifier
    const DWORD LOCALE_IFIRSTWEEKOFYEAR     = 0x0000100D;   // first week of year specifier

    const DWORD LOCALE_SDAYNAME1            = 0x0000002A;   // long name for Monday
    const DWORD LOCALE_SDAYNAME2            = 0x0000002B;   // long name for Tuesday
    const DWORD LOCALE_SDAYNAME3            = 0x0000002C;   // long name for Wednesday
    const DWORD LOCALE_SDAYNAME4            = 0x0000002D;   // long name for Thursday
    const DWORD LOCALE_SDAYNAME5            = 0x0000002E;   // long name for Friday
    const DWORD LOCALE_SDAYNAME6            = 0x0000002F;   // long name for Saturday
    const DWORD LOCALE_SDAYNAME7            = 0x00000030;   // long name for Sunday
    const DWORD LOCALE_SABBREVDAYNAME1      = 0x00000031;   // abbreviated name for Monday
    const DWORD LOCALE_SABBREVDAYNAME2      = 0x00000032;   // abbreviated name for Tuesday
    const DWORD LOCALE_SABBREVDAYNAME3      = 0x00000033;   // abbreviated name for Wednesday
    const DWORD LOCALE_SABBREVDAYNAME4      = 0x00000034;   // abbreviated name for Thursday
    const DWORD LOCALE_SABBREVDAYNAME5      = 0x00000035;   // abbreviated name for Friday
    const DWORD LOCALE_SABBREVDAYNAME6      = 0x00000036;   // abbreviated name for Saturday
    const DWORD LOCALE_SABBREVDAYNAME7      = 0x00000037;   // abbreviated name for Sunday
    const DWORD LOCALE_SMONTHNAME1          = 0x00000038;   // long name for January
    const DWORD LOCALE_SMONTHNAME2          = 0x00000039;   // long name for February
    const DWORD LOCALE_SMONTHNAME3          = 0x0000003A;   // long name for March
    const DWORD LOCALE_SMONTHNAME4          = 0x0000003B;   // long name for April
    const DWORD LOCALE_SMONTHNAME5          = 0x0000003C;   // long name for May
    const DWORD LOCALE_SMONTHNAME6          = 0x0000003D;   // long name for June
    const DWORD LOCALE_SMONTHNAME7          = 0x0000003E;   // long name for July
    const DWORD LOCALE_SMONTHNAME8          = 0x0000003F;   // long name for August
    const DWORD LOCALE_SMONTHNAME9          = 0x00000040;   // long name for September
    const DWORD LOCALE_SMONTHNAME10         = 0x00000041;   // long name for October
    const DWORD LOCALE_SMONTHNAME11         = 0x00000042;   // long name for November
    const DWORD LOCALE_SMONTHNAME12         = 0x00000043;   // long name for December
    const DWORD LOCALE_SMONTHNAME13         = 0x0000100E;   // long name for 13th month (if exists)
    const DWORD LOCALE_SABBREVMONTHNAME1    = 0x00000044;   // abbreviated name for January
    const DWORD LOCALE_SABBREVMONTHNAME2    = 0x00000045;   // abbreviated name for February
    const DWORD LOCALE_SABBREVMONTHNAME3    = 0x00000046;   // abbreviated name for March
    const DWORD LOCALE_SABBREVMONTHNAME4    = 0x00000047;   // abbreviated name for April
    const DWORD LOCALE_SABBREVMONTHNAME5    = 0x00000048;   // abbreviated name for May
    const DWORD LOCALE_SABBREVMONTHNAME6    = 0x00000049;   // abbreviated name for June
    const DWORD LOCALE_SABBREVMONTHNAME7    = 0x0000004A;   // abbreviated name for July
    const DWORD LOCALE_SABBREVMONTHNAME8    = 0x0000004B;   // abbreviated name for August
    const DWORD LOCALE_SABBREVMONTHNAME9    = 0x0000004C;   // abbreviated name for September
    const DWORD LOCALE_SABBREVMONTHNAME10   = 0x0000004D;   // abbreviated name for October
    const DWORD LOCALE_SABBREVMONTHNAME11   = 0x0000004E;   // abbreviated name for November
    const DWORD LOCALE_SABBREVMONTHNAME12   = 0x0000004F;   // abbreviated name for December
    const DWORD LOCALE_SABBREVMONTHNAME13   = 0x0000100F;   // abbreviated name for 13th month (if exists)

    const DWORD LOCALE_SPOSITIVESIGN        = 0x00000050;   // positive sign
    const DWORD LOCALE_SNEGATIVESIGN        = 0x00000051;   // negative sign
    const DWORD LOCALE_IPOSSIGNPOSN         = 0x00000052;   // positive sign position
    const DWORD LOCALE_INEGSIGNPOSN         = 0x00000053;   // negative sign position
    const DWORD LOCALE_IPOSSYMPRECEDES      = 0x00000054;   // mon sym precedes pos amt
    const DWORD LOCALE_IPOSSEPBYSPACE       = 0x00000055;   // mon sym sep by space from pos amt
    const DWORD LOCALE_INEGSYMPRECEDES      = 0x00000056;   // mon sym precedes neg amt
    const DWORD LOCALE_INEGSEPBYSPACE       = 0x00000057;   // mon sym sep by space from neg amt

    const DWORD LOCALE_FONTSIGNATURE       = 0x00000058;   // font signature

    // Time Flags for GetTimeFormatW.
    const DWORD TIME_NOMINUTESORSECONDS    = 0x00000001;  // do not use minutes or seconds
    const DWORD TIME_NOSECONDS             = 0x00000002;  // do not use seconds
    const DWORD TIME_NOTIMEMARKER          = 0x00000004;  // do not use time marker
    const DWORD TIME_FORCE24HOURFORMAT     = 0x00000008;  // always use 24 hour format


    // Date Flags for GetDateFormatW.
    const DWORD DATE_SHORTDATE             = 0x00000001;  // use short date picture
    const DWORD DATE_LONGDATE              = 0x00000002;  // use long date picture
    const DWORD DATE_USE_ALT_CALENDAR      = 0x00000004;  // use alternate calendar (if any)


    // Calendar Types.
    //  These types are used for the GetALTCalendarInfoW NLS API routine.

    const DWORD CAL_ICALINTVALUE           = 0x00000001;   // calendar type
    const DWORD CAL_SCALNAME               = 0x00000002;   // native name of calendar
    const DWORD CAL_IYEAROFFSETRANGE       = 0x00000003;   // starting years of eras
    const DWORD CAL_SERASTRING             = 0x00000004;   // era name for IYearOffsetRanges
    const DWORD CAL_SSHORTDATE             = 0x00000005;   // short date format string
    const DWORD CAL_SLONGDATE              = 0x00000006;   // long date format string
    const DWORD CAL_SDAYNAME1              = 0x00000007;   // native name for Monday
    const DWORD CAL_SDAYNAME2              = 0x00000008;   // native name for Tuesday
    const DWORD CAL_SDAYNAME3              = 0x00000009;   // native name for Wednesday
    const DWORD CAL_SDAYNAME4              = 0x0000000a;   // native name for Thursday
    const DWORD CAL_SDAYNAME5              = 0x0000000b;   // native name for Friday
    const DWORD CAL_SDAYNAME6              = 0x0000000c;   // native name for Saturday
    const DWORD CAL_SDAYNAME7              = 0x0000000d;   // native name for Sunday
    const DWORD CAL_SABBREVDAYNAME1        = 0x0000000e;   // abbreviated name for Monday
    const DWORD CAL_SABBREVDAYNAME2        = 0x0000000f;   // abbreviated name for Tuesday
    const DWORD CAL_SABBREVDAYNAME3        = 0x00000010;   // abbreviated name for Wednesday
    const DWORD CAL_SABBREVDAYNAME4        = 0x00000011;   // abbreviated name for Thursday
    const DWORD CAL_SABBREVDAYNAME5        = 0x00000012;   // abbreviated name for Friday
    const DWORD CAL_SABBREVDAYNAME6        = 0x00000013;   // abbreviated name for Saturday
    const DWORD CAL_SABBREVDAYNAME7        = 0x00000014;   // abbreviated name for Sunday
    const DWORD CAL_SMONTHNAME1            = 0x00000015;   // native name for January
    const DWORD CAL_SMONTHNAME2            = 0x00000016;   // native name for February
    const DWORD CAL_SMONTHNAME3            = 0x00000017;   // native name for March
    const DWORD CAL_SMONTHNAME4            = 0x00000018;   // native name for April
    const DWORD CAL_SMONTHNAME5            = 0x00000019;   // native name for May
    const DWORD CAL_SMONTHNAME6            = 0x0000001a;   // native name for June
    const DWORD CAL_SMONTHNAME7            = 0x0000001b;   // native name for July
    const DWORD CAL_SMONTHNAME8            = 0x0000001c;   // native name for August
    const DWORD CAL_SMONTHNAME9            = 0x0000001d;   // native name for September
    const DWORD CAL_SMONTHNAME10           = 0x0000001e;   // native name for October
    const DWORD CAL_SMONTHNAME11           = 0x0000001f;   // native name for November
    const DWORD CAL_SMONTHNAME12           = 0x00000020;   // native name for December
    const DWORD CAL_SMONTHNAME13           = 0x00000021;   // native name for 13th month (if any)
    const DWORD CAL_SABBREVMONTHNAME1      = 0x00000022;   // abbreviated name for January
    const DWORD CAL_SABBREVMONTHNAME2      = 0x00000023;   // abbreviated name for February
    const DWORD CAL_SABBREVMONTHNAME3      = 0x00000024;   // abbreviated name for March
    const DWORD CAL_SABBREVMONTHNAME4      = 0x00000025;   // abbreviated name for April
    const DWORD CAL_SABBREVMONTHNAME5      = 0x00000026;   // abbreviated name for May
    const DWORD CAL_SABBREVMONTHNAME6      = 0x00000027;   // abbreviated name for June
    const DWORD CAL_SABBREVMONTHNAME7      = 0x00000028;   // abbreviated name for July
    const DWORD CAL_SABBREVMONTHNAME8      = 0x00000029;   // abbreviated name for August
    const DWORD CAL_SABBREVMONTHNAME9      = 0x0000002a;   // abbreviated name for September
    const DWORD CAL_SABBREVMONTHNAME10     = 0x0000002b;   // abbreviated name for October
    const DWORD CAL_SABBREVMONTHNAME11     = 0x0000002c;   // abbreviated name for November
    const DWORD CAL_SABBREVMONTHNAME12     = 0x0000002d;   // abbreviated name for December
    const DWORD CAL_SABBREVMONTHNAME13     = 0x0000002e;   // abbreviated name for 13th month (if any)


    // Calendar Enumeration Value.
    const DWORD ENUM_ALL_CALENDARS         = 0xffffffff;   // enumerate all calendars


    // Calendar ID Values.
    const DWORD CAL_GREGORIAN        = 1;         // Gregorian (localized) calendar
    const DWORD CAL_GREGORIAN_US     = 2;         // Gregorian (U.S.) calendar
    const DWORD CAL_JAPAN            = 3;         // Japanese Emperor Era calendar
    const DWORD CAL_TAIWAN           = 4;         // Republic of China Era calendar
    const DWORD CAL_KOREA            = 5;         // Korean Tangun Era calendar


    // Function Prototypes

    /*
    // Code Page Dependent APIs.

    BOOL WINAPI IsValidCodePage(
        UINT  CodePage);

    UINT WINAPI GetACP(void);

    UINT WINAPI GetOEMCP(void);

    BOOL WINAPI GetCPInfo(
        UINT      CodePage,
        LPCPINFO  lpCPInfo);

    BOOL WINAPI IsDBCSLeadByte(
        BYTE  TestChar);

    BOOL WINAPI IsDBCSLeadByteEx(
        UINT  CodePage,
        BYTE  TestChar);
    */

    [
    usesgetlasterror,
    entry("MultiByteToWideChar"),
    helpstring("Maps a character string to a wide-character (Unicode) string"),
    ]
    int WINAPI MultiByteToWideChar(
        UINT     CodePage,
        DWORD    dwFlags,
        LPCSTR   lpMultiByteStr,
        int      cchMultiByte,
        LPWSTR   lpWideCharStr,
        int      cchWideChar);

    [
    usesgetlasterror,
    entry("MultiByteToWideChar"),
    helpstring("Maps a character string to a wide-character (Unicode) string"),
    ]
    int WINAPI MultiByteToWideCharPtrs(
        UINT     CodePage,
        DWORD    dwFlags,
        LONG     lpMultiByteStr,
        int      cchMultiByte,
        LONG     lpWideCharStr,
        int      cchWideChar);

    [
    usesgetlasterror,
    entry("WideCharToMultiByte"),
    helpstring("Maps a wide-character string to a new character string"),
    ]
    int WINAPI WideCharToMultiByte(
        UINT     CodePage,
        DWORD    dwFlags,
        LPCWSTR  lpWideCharStr,
        int      cchWideChar,
        LPSTR    lpMultiByteStr,
        int      cchMultiByte,
        LPCSTR   lpDefaultChar,
        BOOL  * lpUsedDefaultChar);

    [
    usesgetlasterror,
    entry("WideCharToMultiByte"),
    helpstring("Maps a wide-character string to a new character string"),
    ]
    int WINAPI WideCharToMultiBytePtrs(
        UINT     CodePage,
        DWORD    dwFlags,
        LONG     lpWideCharStr,
        int      cchWideChar,
        LONG     lpMultiByteStr,
        int      cchMultiByte,
        LPCSTR   lpDefaultChar,
        BOOL  * lpUsedDefaultChar);

    // Locale Dependent APIs.

    [
    usesgetlasterror,
    #ifdef UNICODE
    entry("CompareStringW"),
    #else
    entry("CompareStringA"),
    #endif
    helpstring("Compares two character strings using a specified local"),
    ]
    int WINAPI CompareString(
        DWORD /* LCID */    Locale,
        DWORD    dwCmpFlags,
        LPCTSTR lpString1,
        int      cchCount1,
        LPCTSTR lpString2,
        int      cchCount2);

    const DWORD CSTR_LESS_THAN      = 1;
    const DWORD CSTR_EQUAL          = 2;
    const DWORD CSTR_GREATER_THAN   = 3;

    [
    usesgetlasterror,
    #ifdef UNICODE
    entry("LCMapStringW"),
    #else
    entry("LCMapStringA"),
    #endif
    helpstring("Maps one character string to another, performing a specified locale-dependent transformation"),
    ]
    int WINAPI LCMapString(
        DWORD /* LCID */    Locale,
        DWORD    dwMapFlags,
        LPCTSTR lpSrcStr,
        int      cchSrc,
        LPTSTR  lpDestStr,
        int      cchDest);

	/*
    [
    usesgetlasterror,
    #ifdef UNICODE
    entry("GetLocaleInfoW"),
    #else
    entry("GetLocaleInfoA"),
    #endif
    helpstring("Retrieves information about a locale"),
    ]
    int WINAPI GetLocaleInfo(
        LCID     Locale,
        LCTYPE   LCType,
        LPTSTR  lpLCData,
        int      cchData);

    [
    usesgetlasterror,
    #ifdef UNICODE
    entry("SetLocaleInfoW"),
    #else
    entry("SetLocaleInfoA"),
    #endif
    helpstring("Sets an item of locale information"),
    ]
    BOOL WINAPI SetLocaleInfo(
        LCID     Locale,
        LCTYPE   LCType,
        LPCTSTR lpLCData);
	*/

    [
    usesgetlasterror,
    #ifdef UNICODE
    entry("GetTimeFormatW"),
    #else
    entry("GetTimeFormatA"),
    #endif
    helpstring("Formats a time as a time string for a specified locale"),
    ]
    int WINAPI GetTimeFormat(
        LCID     Locale,
        DWORD    dwFlags,
        SYSTEMTIME *lpTime,
        LPCTSTR lpFormat,
        LPTSTR  lpTimeStr,
        int      cchTime);

    [
    usesgetlasterror,
    #ifdef UNICODE
    entry("GetDateFormatW"),
    #else
    entry("GetDateFormatA"),
    #endif
    helpstring("Formats a date as a date string for a specified locale"),
    ]
    int WINAPI GetDateFormat(
        LCID     Locale,
        DWORD    dwFlags,
        SYSTEMTIME *lpDate,
        LPCTSTR lpFormat,
        LPTSTR  lpDateStr,
        int      cchDate);

    /*
    [
    usesgetlasterror,
    #ifdef UNICODE
    entry("GetUserNameW"),
    #else
    entry("GetUserNameA"),
    #endif
    helpstring(""),
    ]
    int WINAPI GetNumberFormat(
        LCID     Locale,
        DWORD    dwFlags,
        LPCTSTR lpValue,
        CONST NUMBERFMTA *lpFormat,
        LPTSTR  lpNumberStr,
        int      cchNumber);

    [
    usesgetlasterror,
    #ifdef UNICODE
    entry("GetCurrencyFormatW"),
    #else
    entry("GetCurrencyFormatA"),
    #endif
    helpstring(""),
    ]
    int WINAPI GetCurrencyFormat(
        LCID     Locale,
        DWORD    dwFlags,
        LPCTSTR  lpValue,
        CURRENCYFMT *lpFormat,
        LPTSTR   lpCurrencyStr,
        int      cchCurrency);

    BOOL WINAPI EnumCalendarInfo(
        CALINFO_ENUMPROCA lpCalInfoEnumProc,
        LCID              Locale,
        CALID             Calendar,
        CALTYPE           CalType);

    BOOL WINAPI EnumTimeFormats(
        TIMEFMT_ENUMPROCA lpTimeFmtEnumProc,
        LCID              Locale,
        DWORD             dwFlags);

    BOOL WINAPI EnumDateFormats(
        DATEFMT_ENUMPROCA lpDateFmtEnumProc,
        LCID              Locale,
        DWORD             dwFlags);

    BOOL WINAPI IsValidLocale(
        LCID   Locale,
        DWORD  dwFlags);

    LCID WINAPI ConvertDefaultLocale(
        LCID   Locale);

    LCID WINAPI GetThreadLocale(void);

    BOOL WINAPI SetThreadLocale(
        LCID  Locale
        );

    LANGID WINAPI GetSystemDefaultLangID(void);

    LANGID WINAPI GetUserDefaultLangID(void);

    LCID WINAPI GetSystemDefaultLCID(void);

    LCID WINAPI GetUserDefaultLCID(void);

    // Locale Independent APIs.

    [
    usesgetlasterror,
    #ifdef UNICODE
    entry("GetStringTypeEx"),
    #else
    entry("GetStringTypeEx"),
    #endif
    helpstring(""),
    ]
    BOOL WINAPI GetStringTypeEx(
        LCID     Locale,
        DWORD    dwInfoType,
        LPCTSTR lpSrcStr,
        int      cchSrc,
        LPWORD   lpCharType);

    //
    //  NOTE: The parameters for GetStringTypeA and GetStringTypeW are
    //        NOT the same.  The W version was shipped in NT 3.1.  The
    //        A version was then shipped in 16-bit OLE with the wrong
    //        parameters (ported from Win95).  To be compatible, we
    //        must break the relationship between the A and W versions
    //        of GetStringType.  There will be NO function call for the
    //        generic GetStringType.
    //
    //        GetStringTypeEx (above) should be used instead.
    //
    BOOL WINAPI GetStringType(
        LCID     Locale,
        DWORD    dwInfoType,
        LPCTSTR   lpSrcStr,
        int      cchSrc,
        LPWORD   lpCharType);

    int WINAPI FoldString(
        DWORD    dwMapFlags,
        LPCTSTR lpSrcStr,
        int      cchSrc,
        LPTSTR  lpDestStr,
        int      cchDest);

    BOOL WINAPI EnumSystemLocales(
        LOCALE_ENUMPROCA lpLocaleEnumProc,
        DWORD            dwFlags);

    BOOL WINAPI EnumSystemCodePages(
        CODEPAGE_ENUMPROCA lpCodePageEnumProc,
        DWORD              dwFlags);
    */
}

#endif   // _WINNLS_
