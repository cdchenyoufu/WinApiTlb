// Network API types, constants, and functions

typedef struct  NETRESOURCE {
    DWORD    dwScope;
    DWORD    dwType;
    DWORD    dwDisplayType;
    DWORD    dwUsage;
    PTR /* LPTSTR */ lpLocalName;
    PTR /* LPTSTR */ lpRemoteName;
    PTR /* LPTSTR */ lpComment ;
    PTR /* LPTSTR */ lpProvider;
} NETRESOURCE;

typedef struct CONNECTDLGSTRUCT {
    DWORD cbStructure;       // size of this structure in bytes
    HWND hwndOwner;          // owner window for the dialog
    // DWORD NETRESOURCE lpConnRes; // Requested Resource info
    DWORD dwFlags;           // flags (see below)
    DWORD dwDevNum;          // number of devices connected to
} CONNECTDLGSTRUCT;

typedef struct UNIVERSAL_NAME_INFO {
    PTR /* LPTSTR */ lpUniversalName;
} UNIVERSAL_NAME_INFO;

typedef struct REMOTE_NAME_INFO {
    PTR /* LPTSTR */ lpUniversalName;
    PTR /* LPTSTR */ lpConnectionName;
    PTR /* LPTSTR */ lpRemainingPath;
} REMOTE_NAME_INFO;

typedef struct NETINFOSTRUCT {
    DWORD cbStructure;
    DWORD dwProviderVersion;
    DWORD dwStatus;
    DWORD dwCharacteristics;
    DWORD dwHandle;
    WORD  wNetType;
    DWORD dwPrinters;
    DWORD dwDrives;
} NETINFOSTRUCT;

typedef struct DISCDLGSTRUCT {
    DWORD cbStructure;      // size of this structure in bytes
    HWND  hwndOwner;        // owner window for the dialog
    PTR /* LPTSTR */ lpLocalName;      // local device name
    PTR /* LPTSTR */ lpRemoteName;     // network resource name
    DWORD dwFlags;          // flags
} DISCDLGSTRUCT;

typedef struct NETCONNECTINFOSTRUCT {
    DWORD cbStructure;
    DWORD dwFlags;
    DWORD dwSpeed;
    DWORD dwDelay;
    DWORD dwOptDataSize;
} NETCONNECTINFOSTRUCT;

typedef LONG PFNPROCESSPOLICIES;
// BOOL (FAR PASCAL *PFNPROCESSPOLICIESA) (
//     HWND        hwnd,
//     LPCTSTR    pszPath,
//     LPCTSTR    pszUsername,
//     LPCTSTR    pszComputerName,
//     DWORD       dwFlags
//    );


typedef LONG PFNGETPROFILEPATH;
//
// typedef UINT (FAR PASCAL *PFNGETPROFILEPATHA) (
//     LPCTSTR    pszUsername,
//     LPTSTR     pszBuffer,
//     UINT        cbBuffer
//     );

typedef LONG PFNRECONCILEPROFILE;
// typedef UINT (FAR PASCAL *PFNRECONCILEPROFILEA) (
//     LPCTSTR    pszCentralFile,
//     LPCTSTR    pszLocalFile,
//     DWORD       dwFlags
//     );

[
#ifdef UNICODE
uuid(64675050-3A82-101B-8181-00AA003743D3),
#else
uuid(64674050-3A82-101B-8181-00AA003743D3),
#endif
helpstring("Networks"),
dllname("MPR.DLL")
]
module Network {
    
	// Errors
	[ helpstring("WNet: Function succeeded") ]
	const UINT WN_SUCCESS           = 0;
	[ helpstring("WNet: Function succeeded") ]
	const UINT WN_NO_ERROR			= 0;
	[ helpstring("WNet: Function not supported") ] 
	const UINT WN_NOT_SUPPORTED     = 50;
	[ helpstring("WNet: Canceled by user") ] 
	const UINT WN_CANCEL            = 1223;
	[ helpstring("WNet: Continued by user") ] 
	const UINT WN_CONTINUE          = 1237;
	[ helpstring("WNet: Network error") ] 
	const UINT WN_NET_ERROR         = 59;
	[ helpstring("WNet: Buffer too small") ] 
	const UINT WN_MORE_DATA         = 234;
	[ helpstring("WNet: A pointer value was invalid") ] 
	const UINT WN_BAD_POINTER       = 487;
	[ helpstring("WNet: Local name invalid") ] 
	const UINT WN_BAD_VALUE         = 87;
	[ helpstring("WNet: Invalid password") ] 
	const UINT WN_BAD_PASSWORD      = 86;
	[ helpstring("WNet: Invalid user") ] 
	const UINT WN_BAD_USER          = 2202;
	[ helpstring("WNet: A security violation occurred") ] 
	const UINT WN_ACCESS_DENIED     = 5;
	[ helpstring("WNet: The requested resource is in use") ] 
	const UINT WN_FUNCTION_BUSY     = 142;
	[ helpstring("WNet: Unexpected error") ] 
	const UINT WN_WINDOWS_ERROR     = 59;
	[ helpstring("WNet: System out of memory") ] 
	const UINT WN_OUT_OF_MEMORY     = 8;
    [ helpstring("WNet: The network is not present or not started") ]
    const long WN_NO_NETWORK        = 1222;
    [ helpstring("WNet: An extended error has occurred") ]
    const long WN_EXTENDED_ERROR	= 1208;
    [ helpstring("WNet: The system call level is not correct") ]
    const long WN_BAD_LEVEL         = 124;
	[ helpstring("WNet: The handle is invalid") ]
    const long WN_BAD_HANDLE        = 6;
    [ helpstring("WNet: An attempt was made to perform an initialization operation when initialization has already been completed") ]
    const long WN_NOT_INITIALIZING	= 1247;
    [ helpstring("WNet: No more local devices") ]
    const long WN_NO_MORE_DEVICES	= 1248;

	// Connection errors
	[ helpstring("WNet: Network connection does not exist") ] 
	const UINT WN_NOT_CONNECTED     = 2250;
	[ helpstring("WNet: Files are open, but force not specified") ] 
	const UINT WN_OPEN_FILES        = 2401;
    [ helpstring("WNet: The device is in use by an active process and cannot be disconnected") ]
    const long WN_DEVICE_IN_USE     = 2404;
	[ helpstring("WNet: Remote name invalid or already connected") ] 
	const UINT WN_BAD_NETNAME       = 67;
	[ helpstring("WNet: Local name invalid") ] 
	const UINT WN_BAD_LOCALNAME     = 1200;
	[ helpstring("WNet: Local device already in use") ] 
	const UINT WN_ALREADY_CONNECTED = 85;
	[ helpstring("WNet: Device not functioning") ] 
	const UINT WN_DEVICE_ERROR      = 31;
	[ helpstring("WNet: Device not currently connected, but is a remembered connection") ]
	const UINT WN_CONNECTION_CLOSED = 1201;
    [ helpstring("WNet: No network provider accepted the given network path") ]
    const long WN_NO_NET_OR_BAD_PATH    = 1203;
    [ helpstring("WNet: Unable to open the network connection profile") ]
    const long WN_CANNOT_OPEN_PROFILE	= 1205;
	[ helpstring("WNet: The specified network provider name is invalid") ]
	const long WN_BAD_PROVIDER		= 1204;
    [ helpstring("WNet: The network connection profile is corrupt") ]
    const long WN_BAD_PROFILE		= 1206;
    [ helpstring("WNet: The network resource type is not correct") ]
    const long WN_BAD_DEV_TYPE		= 66;
    [ helpstring("WNet: An attempt was made to remember a device that had previously been remembered") ]
    const long WN_DEVICE_ALREADY_REMEMBERED  = 1202;

	// Enumeration
    [ helpstring("WNet: No more data is available") ]
    const long WN_NO_MORE_ENTRIES	= 259;
    [ helpstring("WNet: Cannot enumerate a non-container") ]
    const long WN_NOT_CONTAINER		= 1207;

	// Authentication
    [ helpstring("WNet: The operation being requested was not performed because the user has not been authenticated") ]
    const long WN_NOT_AUTHENTICATED	= 1244;
    [ helpstring("WNet: The operation being requested was not performed because the user has not logged on to the network. The specified service does not exist") ]
    const long WN_NOT_LOGGED_ON		= 1245;
    [ helpstring("WNet: There are currently no logon servers available to service the logon request") ]
    const long WN_NOT_VALIDATED			= 1311;


    // ****** Network support *******

    [
    usesgetlasterror,
    #ifdef UNICODE
    entry("WNetAddConnectionW"),
    #else
    entry("WNetAddConnectionA"),
    #endif
    helpstring("Redirects a local device to a shared devices or remote server"),
    ]
    UINT WINAPI WNetAddConnection(LPTSTR lpszNetPath,
                                  LPTSTR lpszPassword,
                                  LPTSTR lpszLocalName);

    [
    usesgetlasterror,
    #ifdef UNICODE
    entry("WNetGetUserW"),
    #else
    entry("WNetGetUserA"),
    #endif
    helpstring("Gets the user name"),
    ]
	DWORD WINAPI WNetGetUser(LPCTSTR lpName, LPTSTR lpUserName, 
						     LPDWORD lpnLength);
 

    [
    usesgetlasterror,
    #ifdef UNICODE
    entry("WNetGetConnectionW"),
    #else
    entry("WNetGetConnectionA"),
    #endif
    helpstring("Gets the name of the shared devices associated with the given local device"),
    ]
    UINT WINAPI WNetGetConnection(LPTSTR lpszLocalName,
                                  LPTSTR lpszRemoteName,
                                  UINT * cbRemoteName);

    [
    usesgetlasterror,
    #ifdef UNICODE
    entry("WNetCancelConnectionW"),
    #else
    entry("WNetCancelConnectionA"),
    #endif
    helpstring("Cancels a network connection device, forcing open connections to close if fForce is true"),
    ]
    UINT WINAPI WNetCancelConnection(LPTSTR lpszName,
                                     BOOL fForce);

    [
    usesgetlasterror,
    entry("WNetConnectionDialog"),
    helpstring("Starts a browsing dialog for connecting to network resources"),
    ]
    UINT WINAPI WNetConnectionDialog(UINT hWnd,
                                     UINT fdwResourceType);


    [
    usesgetlasterror,
    entry("WNetDisconnectDialog"),
    helpstring("Starts a browsing dialog for disconnecting a network resource"),
    ]
    DWORD WINAPI WNetDisconnectDialog(HWND  hwnd,
                                      DWORD dwType);

    const long RESOURCETYPE_ANY         = 0x00000000;
    const long RESOURCETYPE_DISK        = 0x00000001;
    const long RESOURCETYPE_PRINT       = 0x00000002;
    const long RESOURCETYPE_UNKNOWN     = 0xFFFFFFFF;
    const long RESOURCETYPE_RESERVED    = 0x00000008;

    const DWORD RESOURCE_CONNECTED     = 0x00000001;
    const DWORD RESOURCE_GLOBALNET     = 0x00000002;
    const DWORD RESOURCE_REMEMBERED    = 0x00000003;
    const DWORD RESOURCE_RECENT        = 0x00000004;
    const DWORD RESOURCE_CONTEXT       = 0x00000005;

    const DWORD RESOURCEUSAGE_CONNECTABLE  = 0x00000001;
    const DWORD RESOURCEUSAGE_CONTAINER    = 0x00000002;
    const DWORD RESOURCEUSAGE_NOLOCALDEVICE = 0x00000004;
    const DWORD RESOURCEUSAGE_SIBLING      = 0x00000008;
    const DWORD RESOURCEUSAGE_ALL          = 0x00000003; // RESOURCEUSAGE_CONNECTABLE | RESOURCEUSAGE_CONTAINER
    const DWORD RESOURCEUSAGE_RESERVED     = 0x80000000;

    const DWORD RESOURCEDISPLAYTYPE_GENERIC       = 0x00000000;
    const DWORD RESOURCEDISPLAYTYPE_DOMAIN        = 0x00000001;
    const DWORD RESOURCEDISPLAYTYPE_SERVER        = 0x00000002;
    const DWORD RESOURCEDISPLAYTYPE_SHARE         = 0x00000003;
    const DWORD RESOURCEDISPLAYTYPE_FILE          = 0x00000004;
    const DWORD RESOURCEDISPLAYTYPE_GROUP         = 0x00000005;
    const DWORD RESOURCEDISPLAYTYPE_NETWORK       = 0x00000006;
    const DWORD RESOURCEDISPLAYTYPE_ROOT          = 0x00000007;
    const DWORD RESOURCEDISPLAYTYPE_SHAREADMIN    = 0x00000008;
    const DWORD RESOURCEDISPLAYTYPE_DIRECTORY     = 0x00000009;
    const DWORD RESOURCEDISPLAYTYPE_TREE          = 0x0000000A;

    //  Network Connections

    const int NETPROPERTY_PERSISTENT      = 1;

    const DWORD CONNECT_UPDATE_PROFILE     = 0x00000001;
    const DWORD CONNECT_UPDATE_RECENT      = 0x00000002;
    const DWORD CONNECT_TEMPORARY          = 0x00000004;
    const DWORD CONNECT_INTERACTIVE        = 0x00000008;
    const DWORD CONNECT_PROMPT             = 0x00000010;
    const DWORD CONNECT_NEED_DRIVE         = 0x00000020;
    const DWORD CONNECT_REFCOUNT           = 0x00000040;
    const DWORD CONNECT_REDIRECT           = 0x00000080;
    const DWORD CONNECT_LOCALDRIVE         = 0x00000100;
    const DWORD CONNECT_CURRENT_MEDIA      = 0x00000200;

    [
    usesgetlasterror,
    #ifdef UNICODE
    entry("WNetAddConnection2W"),
    #else
    entry("WNetAddConnection2A"),
    #endif
    helpstring("Makes a connection to a network resource"),
    ]
    DWORD WINAPI WNetAddConnection2(NETRESOURCE * lpNetResource,
                                    LPCTSTR lpPassword,
                                    LPCTSTR lpUserName,
                                    DWORD dwFlags);

    [
    usesgetlasterror,
    #ifdef UNICODE
    entry("WNetAddConnection3W"),
    #else
    entry("WNetAddConnection3A"),
    #endif
    helpstring("Makes a connection to a network resource"),
    ]
    DWORD WINAPI WNetAddConnection3(HWND hwndOwner,
                                    NETRESOURCE * lpNetResource,
                                    LPCTSTR lpPassword,
                                    LPCTSTR lpUserName,
                                    DWORD dwFlags);

    [
    usesgetlasterror,
    #ifdef UNICODE
    entry("WNetCancelConnection2W"),
    #else
    entry("WNetCancelConnection2A"),
    #endif
    helpstring("Breaks an existing network connection, or removes remembered connections that are not currently connected"),
    ]
    DWORD WINAPI WNetCancelConnection2(LPCTSTR lpName,
                                       DWORD dwFlags,
                                       BOOL fForce);

    [
    usesgetlasterror,
    #ifdef UNICODE
    entry("WNetUseConnectionW"),
    #else
    entry("WNetUseConnectionA"),
    #endif
    helpstring("Establishes connection to a network object, usually for browsing"),
    ]
    DWORD WINAPI WNetUseConnection(HWND hwndOwner,
                                   NETRESOURCE * lpNetResource,
                                   LPCTSTR lpUserID,
                                   LPCTSTR lpPassword,
                                   DWORD dwFlags,
                                   LPTSTR lpAccessName,
                                   DWORD * lpBufferSize,
                                   DWORD * lpResult);

    [
    usesgetlasterror,
    #ifdef UNICODE
    entry("WNetSetConnectionW"),
    #else
    entry("WNetSetConnectionA"),
    #endif
    helpstring("Changes the characteristics of a network connection"),
    ]
    DWORD WINAPI WNetSetConnection(LPCTSTR lpName,
                                   DWORD dwProperties,
                                   void * pvValues);

    //  Network Connection Dialogs.

    const DWORD CONNDLG_RO_PATH    = 0x00000001; // Resource path should be read-only
    const DWORD CONNDLG_CONN_POINT = 0x00000002; // Netware -style movable connection point enabled
    const DWORD CONNDLG_USE_MRU    = 0x00000004; // Use MRU combobox
    const DWORD CONNDLG_HIDE_BOX   = 0x00000008; // Hide persistent connect checkbox

    // NOTE:  Set at most ONE of the below flags. If neither flag is set,
    //        then the persistence is set to whatever the user chose during
    //        a previous connection
    const DWORD CONNDLG_PERSIST    = 0x00000010;  // Force persistent connection
    const DWORD CONNDLG_NOT_PERSIST = 0x00000020; // Force connection NOT persistent

    [
    usesgetlasterror,
    #ifdef UNICODE
    entry("WNetConnectionDialog1W"),
    #else
    entry("WNetConnectionDialog1A"),
    #endif
    helpstring("Brings up a general browsing dialog for connection to network resources"),
    ]
    DWORD WINAPI WNetConnectionDialog1(CONNECTDLGSTRUCT * lpConnDlgStruct);

    const DWORD DISC_UPDATE_PROFILE        = 0x00000001;
    const DWORD DISC_NO_FORCE              = 0x00000040;

    [
    usesgetlasterror,
    entry("WNetDisconnectDialog1"),
    helpstring("Disconnects a network resource, prompting for confirmation if files are open"),
    ]
    DWORD WINAPI WNetDisconnectDialog1(DISCDLGSTRUCT * lpConnDlgStruct);

    //  Network Browsing.

    [
    usesgetlasterror,
    #ifdef UNICODE
    entry("WNetOpenEnumW"),
    #else
    entry("WNetOpenEnumA"),
    #endif
    helpstring("Starts an enumeration of network resources or existing connections"),
    ]
    DWORD WINAPI WNetOpenEnum(
         DWORD          dwScope,
         DWORD          dwType,
         DWORD          dwUsage,
         NETRESOURCE *  lpNetResource,
         HANDLE *      lphEnum
        );

   [
   usesgetlasterror,
   #ifdef UNICODE
   entry("WNetEnumResourceW"),
   #else
   entry("WNetEnumResourceA"),
   #endif
   helpstring("Continues a network-resource enumeration started WNetOpenEnum"),
   ]
   DWORD WINAPI WNetEnumResource(
        HANDLE  hEnum,
        DWORD * lpcCount,
        void * lpBuffer,
        DWORD * lpBufferSize
       );

   [
   usesgetlasterror,
   entry("WNetCloseEnum"),
   helpstring("Ends a network resource enumeration started by WNetOpenEnum"),
   ]
   DWORD WINAPI WNetCloseEnum(HANDLE   hEnum);

   //  Universal Naming.

   const DWORD UNIVERSAL_NAME_INFO_LEVEL  = 0x00000001;
   const DWORD REMOTE_NAME_INFO_LEVEL     = 0x00000002;
    
   [
   usesgetlasterror,
   #ifdef UNICODE
   entry("WNetGetUniversalNameW"),
   #else
   entry("WNetGetUniversalNameA"),
   #endif
   helpstring("Takes a drive-based path for a network resource and obtains a data structure that contains a more universal form of the name"),
   ]
   DWORD WINAPI WNetGetUniversalName(
        LPCTSTR lpLocalPath,
        DWORD    dwInfoLevel,
        void * lpBuffer,
        DWORD  * lpBufferSize
        );

   // Other

   const WORD WNFMT_MULTILINE        = 0x01;
   const WORD WNFMT_ABBREVIATED      = 0x02;
   const WORD WNFMT_INENUM           = 0x10;
   const WORD WNFMT_CONNECTION       = 0x20;

    [
    usesgetlasterror,
    #ifdef UNICODE
    entry("WNetGetProviderNameW"),
    #else
    entry("WNetGetProviderNameA"),
    #endif
    helpstring("Obtains the provider name for a specific type of network"),
    ]
    DWORD WINAPI WNetGetProviderName(
       DWORD   dwNetType,
       LPTSTR lpProviderName,
       DWORD * lpBufferSize
       );

    const DWORD NETINFO_DLL16      = 0x00000001;  // Provider running as 16 bit Winnet Driver
    const DWORD NETINFO_DISKRED    = 0x00000004;  // Provider requires disk redirections to connect
    const DWORD NETINFO_PRINTERRED = 0x00000008;  // Provider requires printer redirections to connect

    [
    usesgetlasterror,
    #ifdef UNICODE
    entry("WNetGetNetworkInformationW"),
    #else
    entry("WNetGetNetworkInformationA"),
    #endif
    helpstring("Gets extended information about a network whose name was returned by a network enumeration"),
    ]
    DWORD WINAPI WNetGetNetworkInformation(
       LPCTSTR lpProvider,
       NETINFOSTRUCT * lpNetInfoStruct
       );

   //  User Profiles

   const WORD RP_LOGON   = 0x01;  // if set, do for logon, else for logoff
   const WORD RP_INIFILE = 0x02;  // if set, reconcile .INI file, else reg. hive

   //  Policies.

   const WORD PP_DISPLAYERRORS   = 0x01;    // if set, display error messages, else fail silently if error


    //  Error handling.

    [
    usesgetlasterror,
    #ifdef UNICODE
    entry("WNetGetLastErrorW"),
    #else
    entry("WNetGetLastErrorA"),
    #endif
    helpstring("Retrieves the most recent extended error code set by a Windows network function"),
    ]
    DWORD WINAPI WNetGetLastError(
        DWORD * lpError,
        LPTSTR lpErrorBuf,
        DWORD nErrorBufSize,
        LPTSTR lpNameBuf,
        DWORD nNameBufSize);

    //  For Shell

    const DWORD WNCON_FORNETCARD       = 0x00000001;
    const DWORD WNCON_NOTROUTED        = 0x00000002;
    const DWORD WNCON_SLOWLINK         = 0x00000004;
    const DWORD WNCON_DYNAMIC          = 0x00000008;

    [
    usesgetlasterror,
    #ifdef UNICODE
    entry("MultinetGetConnectionPerformanceW"),
    #else
    entry("MultinetGetConnectionPerformanceA"),
    #endif
    helpstring("Gets performance information about a network connection"),
    ]
    DWORD WINAPI MultinetGetConnectionPerformance(
        NETRESOURCE * lpNetResource,
        NETCONNECTINFOSTRUCT * lpNetConnectInfoStruct);

};
